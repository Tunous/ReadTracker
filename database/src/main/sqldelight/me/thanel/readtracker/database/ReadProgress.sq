CREATE TABLE readProgress (
    id INTEGER NOT NULL PRIMARY KEY ON CONFLICT REPLACE,
    bookId INTEGER NOT NULL UNIQUE ON CONFLICT IGNORE,
    page INTEGER as Int NOT NULL,
    reviewId INTEGER NOT NULL,
    FOREIGN KEY (bookId) REFERENCES book(id)
);

-- Trigger which deletes read progress when referenced book is deleted. We are
-- using it instead of ON DELETE CASCADE to prevent read progresses from being
-- deleted while books are being updated on conflicts.
CREATE TRIGGER onDelete_book__delete_readProgress_trigger
AFTER DELETE ON book
BEGIN
  DELETE FROM readProgress WHERE readProgress.bookId = old.id;
END;

selectAll:
SELECT *
FROM readProgress;

deleteAll:
DELETE FROM readProgress;

selectWithBookInformation:
SELECT
    readProgress.id,
    readProgress.page,
    readProgress.reviewId,
    book.id AS bookId,
    book.numPages,
    book.title AS bookTitle,
    book.imageUrl AS bookImageUrl,
    book.authors AS bookAuthors
FROM book
LEFT JOIN readProgress ON readProgress.bookId = book.id
WHERE readProgress.page > 0;

insert:
INSERT INTO readProgress(id, bookId, page, reviewId)
VALUES (?, ?, ?, ?);

selectProgressForBook:
SELECT * FROM readProgress WHERE bookId = ?;

updateProgress:
UPDATE readProgress
SET page = ?
WHERE bookId = ?;

deleteBookForReview:
DELETE FROM book
WHERE id = (
  SELECT bookId
  FROM readProgress
  WHERE reviewId = ?
  LIMIT 1
);
